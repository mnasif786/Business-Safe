using System;
using System.Linq;
using BusinessSafe.Data.Queries;
using BusinessSafe.Data.Queries.CompletedTaskQuery;
using BusinessSafe.Data.Queries.DueTaskQuery;
using BusinessSafe.Data.Queries.GetTaskEmployeesQuery;
using BusinessSafe.Data.Queries.SafeCheck;
using BusinessSafe.Data.Repository;
using BusinessSafe.Data.Repository.SafeCheck;
using BusinessSafe.Domain.Common;
using BusinessSafe.Domain.Entities;
using BusinessSafe.Domain.Entities.SafeCheck;
using BusinessSafe.Domain.RepositoryContracts;
using BusinessSafe.Domain.RepositoryContracts.SafeCheck;
using BusinessSafe.Domain.Services;
using BusinessSafe.Infrastructure.Request;
using StructureMap.Configuration.DSL;
using ChecklistRepository = BusinessSafe.Data.Repository.ChecklistRepository;
using IQuestionRepository = BusinessSafe.Domain.RepositoryContracts.IQuestionRepository;
using QuestionRepository = BusinessSafe.Data.Repository.QuestionRepository;
using BusinessSafe.Data.Queries.OverdueTaskQuery;

namespace BusinessSafe.Data.Common
{
    public class DataRegistry : Registry
    {
        public DataRegistry()
        {
            For<IBusinessSafeCompanyDetailRepository>().Use<BusinessSafeCompanyDetailRepository>();
            For<ITaskCategoryRepository>().Use<TaskCategoryRepository>();
            For<ISiteGroupRepository>().Use<SiteGroupRepository>();
            For<ISiteRepository>().Use<SiteRepository>();
            For<ISiteStructureElementRepository>().Use<SiteStructureElementRepository>();
            For<IPermissionRepository>().Use<PermissionRepository>();
            For<IEmailTemplateRepository>().Use<EmailTemplateRepository>();
            For<INonEmployeeRepository>().Use<NonEmployeeRepository>();
            For<IHazardousSubstanceRiskAssessmentRepository>().Use<HazardousSubstanceRiskAssessmentRepository>();
            For<IRiskAssessmentReviewRepository>().Use<RiskAssessmentReviewRepository>();
            For<IContextItems>().Use<HttpOrWcfContextItems>();
            For<IGeneralRiskAssessmentRepository>().Use<GeneralRiskAssessmentRepository>();
            For<IPersonalRiskAssessmentRepository>().Use<PersonalRiskAssessmentRepository>();
            For<IHazardRepository>().Use<HazardRepository>();
            For<IPeopleAtRiskRepository>().Use<PeopleAtRiskRepository>();
            For<IUserRepository>().Use<UserRepository>();
            For<IRoleRepository>().Use<RoleRepository>();
            For<IEmployeeRepository>().Use<EmployeeRepository>();
            For<IEmploymentStatusRepository>().Use<EmploymentStatusRepository>();
            For<IEmployeeEmergencyContactDetailsRepository>().Use<EmployeeEmergencyContactDetailsRepository>();
            For<INationalityRepository>().Use<NationalityRepository>();
            For<ICountriesRepository>().Use<CountriesRepository>();
            For<ICompanyVehicleTypeRepository>().Use<CompanyVehicleTypeRepository>();
            For<IMultiHazardRiskAssessmentFurtherControlMeasureTaskRepository>().Use<MultiHazardRiskAssessmentFurtherControlMeasureTaskRepository>();
            For<IHazardousSubstanceRiskAssessmentFurtherControlMeasureTaskRepository>().Use<HazardousSubstanceRiskAssessmentFurtherControlMeasureTaskRepository>();
            For<ITasksRepository>().Use<TasksRepository>();
            For<IDocumentTypeRepository>().Use<DocumentTypeRepository>();
            For<IMultiHazardRiskAssessmentHazardRepository>().Use<MultiHazardRiskAssessmentHazardRepository>();
            For<IDocumentRepository>().Use<DocumentRepository>();
            For<IRiskAssessmentDocumentRepository>().Use<RiskAssessmentDocumentRepository>();
            For<IAddedDocumentRepository>().Use<AddedDocumentRepository>();
            For<IDocHandlerDocumentTypeRepository>().Use<DocHandlerDocumentTypeRepository>();
            For<IHazardousSubstancesRepository>().Use<HazardousSubstancesRepository>();
            For<IRiskPhraseRepository>().Use<RiskPhraseRepository>();
            For<ISafetyPhraseRepository>().Use<SafetyPhraseRepository>();
            For<ISupplierRepository>().Use<SupplierRepository>();
            For<IPictogramRepository>().Use<PictogramRepository>();
            For<IControlSystemRepository>().Use<ControlSystemRepository>();
            For<IControlSystemCalculationService>().Use<ControlSystemCalculationService>();
            For<IEmployeeEmergencyContactDetailsRepository>().Use<EmployeeEmergencyContactDetailsRepository>();
            For<IRiskAssessmentRepository>().Use<RiskAssessmentRepository>();
            For<IFurtherControlMeasureTasksRepository>().Use<FurtherControlMeasureTasksRepository>();
            For<IHazardTypeRepository>().Use<HazardTypeRepository>();
            For<IMultiHazardRiskAssessmentRepository>().Use<MultiHazardRiskAssessmentRepository>();
            For<IQuestionRepository>().Use<QuestionRepository>();
            For<IEmployeeChecklistRepository>().Use<EmployeeChecklistRepository>();
            For<IChecklistRepository>().Use<ChecklistRepository>();
            For<IEmployeeChecklistEmailRepository>().Use<EmployeeChecklistEmailRepository>();
            For<IFireRiskAssessmentRepository>().Use<FireRiskAssessmentRepository>();
            For<IFireSafetyControlMeasureRepository>().Use<FireSafetyControlMeasureRepository>();
            For<ISourceOfIgnitionRepository>().Use<SourceOfIgnitionRepository>();
            For<ISourceOfFuelRepository>().Use<SourceOfFuelRepository>();
            For<IFireRiskAssessmentChecklistRepository>().Use<FireRiskAssessmentChecklistRepository>();
            For<ISignificantFindingRepository>().Use<SignificantFindingRepository>();
            For<IFireAnswerRepository>().Use<FireAnswerRepository>();
            For<ITaskDocumentRepository>().Use<TaskDocumentRepository>();
            For<IApplicationTokenRepository>().Use<ApplicationTokenRepository>();
            For<IAuthenticationTokenRepository>().Use<AuthenticationTokenRepository>();
            For<IUserForAuditingRepository>().Use<UserForAuditingRepository>();
            For<IRiskAssessorRepository>().Use<RiskAssessorRepository>();
            For<IEmployeeForAuditingRepository>().Use<EmployeeForAuditingRepository>();
            For<IResponsibilityCategoryRepository>().Use<ResponsibilityCategoryRepository>();
            For<IResponsibilityReasonRepository>().Use<ResponsibilityReasonRepository>();
            For<IResponsibilityRepository>().Use<ResponsibilityRepository>();
            For<IResponsibilityTaskRepository>().Use<ResponsibilityTaskRepository>();
            For<IActionTaskRepository>().Use<ActionTaskRepository>();
            For<ITaskListRepository>().Use<TaskListRepository>();
            For<IStatutoryResponsibilityTemplateRepository>().Use<StatutoryResponsibilityTemplateRepository>();
            For<IStatutoryResponsibilityTaskTemplateRepository>().Use<StatutoryResponsibilityTaskTemplateRepository>();
            For<IAccidentRecordRepository>().Use<AccidentRecordRepository>();
            For<IAccidentTypeRepository>().Use<AccidentTypeRepository>();
            For<ICauseOfAccidentRepository>().Use<CauseOfAccidentRepository>();
            For<IJurisdictionRepository>().Use<JurisdictionRepository>();
            For<IBodyPartRepository>().Use<BodyPartRepository>();
            For<IInjuryRepository>().Use<InjuryRepository>();
            For<Domain.RepositoryContracts.SafeCheck.IQuestionRepository>().Use<Repository.SafeCheck.QuestionRepository>();
            For<ICheckListRepository>().Use<Repository.SafeCheck.ChecklistRepository>();
            For<ICategoryRepository>().Use<Repository.SafeCheck.CategoryRepository>();
            For<IQuestionResponseRepository>().Use<Repository.SafeCheck.QuestionResponseRepository>();
            For<IChecklistTemplateRepository>().Use<Repository.SafeCheck.ChecklistTemplateRepository>();
            For<IChecklistTemplateQuestionRepository>().Use<Repository.SafeCheck.ChecklistTemplateQuestionRepository>();
            For<IGetChecklistsQuery>().Use<GetChecklistsQuery>();
            For<IGetCompleteChecklistsQuery>().Use<GetCompletedChecklistsQuery>();
            For<IChecklistQuestionRepository>().Use<ChecklistQuestionRepository>();
            For(typeof (IQueryableWrapper<>)).Use(typeof (NHibernateQueryable<>));
            For<IImpressionTypeRepository>().Use<Repository.SafeCheck.ImpressionTypeRepository>();
            For<ITimescaleRepository>().Use<TimescaleRepository>();
            For<IActionRepository>().Use<ActionRepository>();
            For<IActionPlanRepository>().Use<ActionPlanRepository>();
            For<IQaAdvisorRepository>().Use<Repository.SafeCheck.QaAdvisorRepository>();
            For<IRepository<ReportLetterStatementCategory, Guid>>().Use<ReportLetterStatementCategoryRepository>();
            For<IConsultantRepository>().Use<ConsultantRepository>();
            For<IRepository<LastQaAdvisorAssigned, int>>().Use<LastQaAdvisorAssignedRepository>();
            For<IGetEmployeeNamesQuery>().Use<GetEmployeeNamesQuery>();
            For<IMaintenanceUserRepository>().Use<MaintenanceUserRepository>();
            For<IGetOverdueMultiHazardRiskAssessmentTasksForEmployeeQuery<GeneralRiskAssessment>>().Use<GetOverdueMultiHazardRiskAssessmentTasksForEmployeeQuery<GeneralRiskAssessment>>();
            For<IGetOverdueMultiHazardRiskAssessmentTasksForEmployeeQuery<PersonalRiskAssessment>>().Use<GetOverdueMultiHazardRiskAssessmentTasksForEmployeeQuery<PersonalRiskAssessment>>();
            For<IGetOverdueFireRiskAssessmentFurtherControlMeasureTasksForEmployeeQuery>().Use<GetOverdueFireRiskAssessmentFurtherControlMeasureTasksForEmployeeQuery>();
            For<IGetOverdueHazardousSubstanceRiskAssessmentFurtherControlMeasureTasksForEmployeeQuery>().Use<GetOverdueHazardousSubstanceRiskAssessmentFurtherControlMeasureTasksForEmployeeQuery>();
            For<IGetOverdueRiskAssessmentReviewTasksForEmployeeQuery>().Use<GetOverdueRiskAssessmentReviewTasks>();
            For<IGetOverdueResponsibilitiesTasksForEmployeeQuery>().Use<GetOverdueResponsibilitiesTasksForEmployeeQuery>();
            For<IGetOverdueActionTasksForEmployeeQuery>().Use<GetOverdueActionTasksForEmployeeQuery>();
            For<IGetCompletedHazardousSubstanceRiskAssessmentFurtherControlMeasureTasksForEmployeeQuery>().Use<GetCompletedHazardousSubstanceRiskAssessmentFurtherControlMeasureTasksForEmployeeQuery>();
            For<IGetCompletedFireRiskAssessmentFurtherControlMeasureTasksForEmployeeQuery>().Use<GetCompletedFireRiskAssessmentFurtherControlMeasureTasksForEmployeeQuery>();
            For<IGetCompletedMultiHazardRiskAssessmentTasksForEmployeeQuery<GeneralRiskAssessment>>().Use<GetCompletedMultiHazardRiskAssessmentTasksForEmployeeQuery<GeneralRiskAssessment>>();
            For<IGetCompletedMultiHazardRiskAssessmentTasksForEmployeeQuery<PersonalRiskAssessment>>().Use<GetCompletedMultiHazardRiskAssessmentTasksForEmployeeQuery<PersonalRiskAssessment>>();
            For<IGetCompletedRiskAssessmentReviewTasksForEmployeeQuery>().Use<GetCompletedRiskAssessmentReviewTasksForEmployeeQuery>();
            For<IGetDueFireRiskAssessmentFurtherControlMeasureTasksForEmployeeQuery>().Use<GetDueFireRiskAssessmentFurtherControlMeasureTasksForEmployeeQuery>();
            For<IGetDueActionTasksForEmployeeQuery>().Use<GetDueActionTasksForEmployeeQuery>();
            For<IGetDueResponsibilityTasksForEmployeeQuery>().Use<GetDueResponsibilityTasksForEmployeeQuery>();
            For<IGetDueHazardousSubstanceRiskAssessmentFurtherControlMeasureTasksForEmployeeQuery>()
                .Use<GetDueHazardousSubstanceRiskAssessmentFurtherControlMeasureTask>();
            For<IGetDueMultiHazardRiskAssessmentTasksForEmployeeQuery<GeneralRiskAssessment>>().Use<GetDueMultiHazardRiskAssessmentTasksForEmployeeQuery<GeneralRiskAssessment>>();
            For<IGetDueMultiHazardRiskAssessmentTasksForEmployeeQuery<PersonalRiskAssessment>>().Use<GetDueMultiHazardRiskAssessmentTasksForEmployeeQuery<PersonalRiskAssessment>>();
            For<IGetDueRiskAssessmentReviewTasksForEmployeeQuery>().Use<GetDueRiskAssessmentReviewTasksForEmployeeQuery>();
            For<IOthersInvolvedAccidentDetailsRepository>().Use<OthersInvolvedAccidentDetailsRepository>();
            
            Scan(s =>
            {
                s.TheCallingAssembly();
                s.AddAllTypesOf<IGetTaskEmployeesQuery>();
            });
        }
    }
}