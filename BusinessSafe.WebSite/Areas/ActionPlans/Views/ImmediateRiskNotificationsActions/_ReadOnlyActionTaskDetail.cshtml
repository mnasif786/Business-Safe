@using BusinessSafe.Domain.Entities
@model BusinessSafe.WebSite.Areas.ActionPlans.ViewModels.CompleteActionTaskViewModel

@Html.HiddenFor(m => m.CompanyId)
@Html.HiddenFor(m => m.ActionTaskId)      
<fieldset class="well readonly">
        <legend>        
        @if(Model.ActionTask.ActionSummary.Category == ActionCategory.Action)
        {
            <h3>Action Task Details</h3>            
        }
        else if (Model.ActionTask.ActionSummary.Category == ActionCategory.ImmediateRiskNotification)
        {
            <h3>Immediate Risk Notification Task Details</h3>
        }

    </legend>
    
    <div class="row">
        @if (Model.ActionTask.ActionSummary.Category == ActionCategory.Action)
        {
            <label class="span2">Number</label>
        }
        else if (Model.ActionTask.ActionSummary.Category == ActionCategory.ImmediateRiskNotification)
        {
            <label class="span2">Reference</label>
        }
        
        @Html.TextBoxFor(x => x.ActionTask.ActionSummary.Reference, new { @class = "span3" })
    </div>

    @if (Model.ActionTask.ActionSummary.Category == ActionCategory.ImmediateRiskNotification)
    {
         <div class="row">        
        <label class="span2">Title</label>
        @Html.TextBoxFor(x => x.ActionTask.ActionSummary.Title, new { maxlength = 100, @class = "span7" })
    </div>
    }


    <div class="row">        
        @if (Model.ActionTask.ActionSummary.Category == ActionCategory.Action)
        {
            <label class="span2">Area of <br/> Non-compliance</label>
        }
        else if (Model.ActionTask.ActionSummary.Category == ActionCategory.ImmediateRiskNotification)
        {
            <label class="span2">Significant Hazard Identified</label>
        }  
              
        @Html.TextAreaFor(x => x.ActionTask.ActionSummary.AreaOfNonCompliance, new { maxlength = 500, @class = "offset1 span7" })
    </div>

    <div class="row">
        @if (Model.ActionTask.ActionSummary.Category == ActionCategory.Action)
        {
            <label class="span2">Action Required</label>
        }
        else if (Model.ActionTask.ActionSummary.Category == ActionCategory.ImmediateRiskNotification)
        {
            <label class="span2">Recommended Immediate Action</label>
        }  
        
        @Html.TextAreaFor(x => x.ActionTask.ActionSummary.ActionRequired, new { maxlength = 500, @class = "span7" })
    </div>

     @if (Model.ActionTask.ActionSummary.Category == ActionCategory.Action)
     {
        <div class="row">
            <label class="span2">Guidance Notes</label>
            @Html.TextBoxFor(x => x.ActionTask.ActionSummary.GuidanceNotes, new { @class = "span3" })
        </div>
    
        <div class="row">
            <label class="span2">Target Timescale</label>
            @Html.TextBoxFor(x => x.ActionTask.ActionSummary.TargetTimescale, new { @class = "span3" })
        </div>
     }
    <div class="row">
        <label class="span2">Assigned To</label>
        @Html.TextBoxFor(m => m.ActionTask.AssignedTo, new { @class = "span3" })
        @Html.HiddenFor(x => x.ActionTask.AssignedToId)
    </div>

    <div class="row-fluid employee-not-user-alert-message hide">
        @Html.Partial("_EmployeeNotAUserWarning")
    </div>
    
    <div class="row">
        <label class="span2">Due Date</label>
        @Html.TextBoxFor(x => x.ActionTask.ActionSummary.DueDateFormatted, new { @class = "span3" })
    </div>
  
</fieldset>

<div id="notificationEmail">
    <fieldset class="readonly">
        <legend>
            <h3>
                Notification Emails</h3>
        </legend>
        <p class="alert" style="margin-bottom: 5px;">
            If you do not want to send notification emails, please tick the type you do not
            want to send.</p>
        <label for="DoNotSendTaskAssignedNotification" class="span3">
            Task Assigned
            @Html.CheckBoxFor(m => m.ActionTask.DoNotSendTaskAssignedNotification, new { style = "display: inline-block;" })
        </label>
        <label for="DoNotSendTaskCompletedNotification" class="span3">
            Task Completion
            @Html.CheckBoxFor(m => m.ActionTask.DoNotSendTaskCompletedNotification, new { style = "display: inline-block;" })
        </label>
        <label for="DoNotSendTaskOverdueNotification" class="span3">
            Task Overdue
            @Html.CheckBoxFor(m => m.ActionTask.DoNotSendTaskOverdueNotification, new { style = "display: inline-block;" })
        </label>
    </fieldset>
</div>
@if (Model.ActionTask.TaskStatusId == (int)TaskStatus.Completed)
{
    <fieldset class="well readonly">
        <legend>
            <h3>
                Complete Task</h3>
        </legend>
        <div class="row">
            <label for="TaskCompletedDate" class="span2">
                Completed Date</label>
            @Html.TextBoxFor(x => x.ActionTask.TaskCompletedDate, new { @class = "span2" })
        </div>
        <div class="row">
            <label for="TaskCompletedComments" class="span2">
                Completed Comments</label>
            @Html.TextAreaFor(x => x.ActionTask.TaskCompletedComments, new { @class = "span7" })
        </div>
    </fieldset>
}
<script type="text/javascript">
    new SetFormToReadOnly('.readonly').execute();
</script>
