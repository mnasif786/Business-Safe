using System.ServiceModel;
using System.ServiceModel.Description;

namespace BusinessSafe.WebSite.SqlReportExecutionService
{
    public interface IReportExecutionServiceSoapClient : ReportExecutionServiceSoap
    {
        BusinessSafe.WebSite.SqlReportExecutionService.ServerInfoHeader ListSecureMethods(BusinessSafe.WebSite.SqlReportExecutionService.TrustedUserHeader TrustedUserHeader, out string[] ListSecureMethodsResult);
        BusinessSafe.WebSite.SqlReportExecutionService.ExecutionHeader LoadReport(BusinessSafe.WebSite.SqlReportExecutionService.TrustedUserHeader TrustedUserHeader, string Report, string HistoryID, out BusinessSafe.WebSite.SqlReportExecutionService.ServerInfoHeader ServerInfoHeader, out BusinessSafe.WebSite.SqlReportExecutionService.ExecutionInfo executionInfo);
        BusinessSafe.WebSite.SqlReportExecutionService.ExecutionHeader LoadReport2(BusinessSafe.WebSite.SqlReportExecutionService.TrustedUserHeader TrustedUserHeader, string Report, string HistoryID, out BusinessSafe.WebSite.SqlReportExecutionService.ServerInfoHeader ServerInfoHeader, out BusinessSafe.WebSite.SqlReportExecutionService.ExecutionInfo2 executionInfo);
        BusinessSafe.WebSite.SqlReportExecutionService.ExecutionHeader LoadReportDefinition(BusinessSafe.WebSite.SqlReportExecutionService.TrustedUserHeader TrustedUserHeader, byte[] Definition, out BusinessSafe.WebSite.SqlReportExecutionService.ServerInfoHeader ServerInfoHeader, out BusinessSafe.WebSite.SqlReportExecutionService.ExecutionInfo executionInfo, out Warning[] warnings);
        BusinessSafe.WebSite.SqlReportExecutionService.ExecutionHeader LoadReportDefinition2(BusinessSafe.WebSite.SqlReportExecutionService.TrustedUserHeader TrustedUserHeader, byte[] Definition, out BusinessSafe.WebSite.SqlReportExecutionService.ServerInfoHeader ServerInfoHeader, out BusinessSafe.WebSite.SqlReportExecutionService.ExecutionInfo2 executionInfo, out Warning[] warnings);
        BusinessSafe.WebSite.SqlReportExecutionService.ServerInfoHeader SetExecutionCredentials(BusinessSafe.WebSite.SqlReportExecutionService.ExecutionHeader ExecutionHeader, BusinessSafe.WebSite.SqlReportExecutionService.TrustedUserHeader TrustedUserHeader, DataSourceCredentials[] Credentials, out BusinessSafe.WebSite.SqlReportExecutionService.ExecutionInfo executionInfo);
        BusinessSafe.WebSite.SqlReportExecutionService.ServerInfoHeader SetExecutionCredentials2(BusinessSafe.WebSite.SqlReportExecutionService.ExecutionHeader ExecutionHeader, BusinessSafe.WebSite.SqlReportExecutionService.TrustedUserHeader TrustedUserHeader, DataSourceCredentials[] Credentials, out BusinessSafe.WebSite.SqlReportExecutionService.ExecutionInfo2 executionInfo);
        BusinessSafe.WebSite.SqlReportExecutionService.ServerInfoHeader SetExecutionParameters(BusinessSafe.WebSite.SqlReportExecutionService.ExecutionHeader ExecutionHeader, BusinessSafe.WebSite.SqlReportExecutionService.TrustedUserHeader TrustedUserHeader, ParameterValue[] Parameters, string ParameterLanguage, out BusinessSafe.WebSite.SqlReportExecutionService.ExecutionInfo executionInfo);
        BusinessSafe.WebSite.SqlReportExecutionService.ServerInfoHeader SetExecutionParameters2(BusinessSafe.WebSite.SqlReportExecutionService.ExecutionHeader ExecutionHeader, BusinessSafe.WebSite.SqlReportExecutionService.TrustedUserHeader TrustedUserHeader, ParameterValue[] Parameters, string ParameterLanguage, out BusinessSafe.WebSite.SqlReportExecutionService.ExecutionInfo2 executionInfo);
        BusinessSafe.WebSite.SqlReportExecutionService.ServerInfoHeader ResetExecution(BusinessSafe.WebSite.SqlReportExecutionService.ExecutionHeader ExecutionHeader, BusinessSafe.WebSite.SqlReportExecutionService.TrustedUserHeader TrustedUserHeader, out BusinessSafe.WebSite.SqlReportExecutionService.ExecutionInfo executionInfo);
        BusinessSafe.WebSite.SqlReportExecutionService.ServerInfoHeader ResetExecution2(BusinessSafe.WebSite.SqlReportExecutionService.ExecutionHeader ExecutionHeader, BusinessSafe.WebSite.SqlReportExecutionService.TrustedUserHeader TrustedUserHeader, out BusinessSafe.WebSite.SqlReportExecutionService.ExecutionInfo2 executionInfo);
        BusinessSafe.WebSite.SqlReportExecutionService.ServerInfoHeader Render(BusinessSafe.WebSite.SqlReportExecutionService.ExecutionHeader ExecutionHeader, BusinessSafe.WebSite.SqlReportExecutionService.TrustedUserHeader TrustedUserHeader, string Format, string DeviceInfo, out byte[] Result, out string Extension, out string MimeType, out string Encoding, out Warning[] Warnings, out string[] StreamIds);
        BusinessSafe.WebSite.SqlReportExecutionService.ServerInfoHeader Render2(BusinessSafe.WebSite.SqlReportExecutionService.ExecutionHeader ExecutionHeader, BusinessSafe.WebSite.SqlReportExecutionService.TrustedUserHeader TrustedUserHeader, string Format, string DeviceInfo, BusinessSafe.WebSite.SqlReportExecutionService.PageCountMode PaginationMode, out byte[] Result, out string Extension, out string MimeType, out string Encoding, out Warning[] Warnings, out string[] StreamIds);
        BusinessSafe.WebSite.SqlReportExecutionService.ServerInfoHeader RenderStream(BusinessSafe.WebSite.SqlReportExecutionService.ExecutionHeader ExecutionHeader, BusinessSafe.WebSite.SqlReportExecutionService.TrustedUserHeader TrustedUserHeader, string Format, string StreamID, string DeviceInfo, out byte[] Result, out string Encoding, out string MimeType);
        BusinessSafe.WebSite.SqlReportExecutionService.ServerInfoHeader GetExecutionInfo(BusinessSafe.WebSite.SqlReportExecutionService.ExecutionHeader ExecutionHeader, BusinessSafe.WebSite.SqlReportExecutionService.TrustedUserHeader TrustedUserHeader, out BusinessSafe.WebSite.SqlReportExecutionService.ExecutionInfo executionInfo);
        BusinessSafe.WebSite.SqlReportExecutionService.ServerInfoHeader GetExecutionInfo2(BusinessSafe.WebSite.SqlReportExecutionService.ExecutionHeader ExecutionHeader, BusinessSafe.WebSite.SqlReportExecutionService.TrustedUserHeader TrustedUserHeader, out BusinessSafe.WebSite.SqlReportExecutionService.ExecutionInfo2 executionInfo);
        BusinessSafe.WebSite.SqlReportExecutionService.ServerInfoHeader GetDocumentMap(BusinessSafe.WebSite.SqlReportExecutionService.ExecutionHeader ExecutionHeader, BusinessSafe.WebSite.SqlReportExecutionService.TrustedUserHeader TrustedUserHeader, out BusinessSafe.WebSite.SqlReportExecutionService.DocumentMapNode result);
        BusinessSafe.WebSite.SqlReportExecutionService.ServerInfoHeader LoadDrillthroughTarget(ref BusinessSafe.WebSite.SqlReportExecutionService.ExecutionHeader ExecutionHeader, BusinessSafe.WebSite.SqlReportExecutionService.TrustedUserHeader TrustedUserHeader, string DrillthroughID, out BusinessSafe.WebSite.SqlReportExecutionService.ExecutionInfo ExecutionInfo);
        BusinessSafe.WebSite.SqlReportExecutionService.ServerInfoHeader LoadDrillthroughTarget2(ref BusinessSafe.WebSite.SqlReportExecutionService.ExecutionHeader ExecutionHeader, BusinessSafe.WebSite.SqlReportExecutionService.TrustedUserHeader TrustedUserHeader, string DrillthroughID, out BusinessSafe.WebSite.SqlReportExecutionService.ExecutionInfo2 ExecutionInfo);
        BusinessSafe.WebSite.SqlReportExecutionService.ServerInfoHeader ToggleItem(BusinessSafe.WebSite.SqlReportExecutionService.ExecutionHeader ExecutionHeader, BusinessSafe.WebSite.SqlReportExecutionService.TrustedUserHeader TrustedUserHeader, string ToggleID, out bool Found);
        BusinessSafe.WebSite.SqlReportExecutionService.ServerInfoHeader NavigateDocumentMap(BusinessSafe.WebSite.SqlReportExecutionService.ExecutionHeader ExecutionHeader, BusinessSafe.WebSite.SqlReportExecutionService.TrustedUserHeader TrustedUserHeader, string DocMapID, out int PageNumber);
        BusinessSafe.WebSite.SqlReportExecutionService.ServerInfoHeader NavigateBookmark(BusinessSafe.WebSite.SqlReportExecutionService.ExecutionHeader ExecutionHeader, BusinessSafe.WebSite.SqlReportExecutionService.TrustedUserHeader TrustedUserHeader, string BookmarkID, out int PageNumber, out string UniqueName);
        BusinessSafe.WebSite.SqlReportExecutionService.ServerInfoHeader FindString(BusinessSafe.WebSite.SqlReportExecutionService.ExecutionHeader ExecutionHeader, BusinessSafe.WebSite.SqlReportExecutionService.TrustedUserHeader TrustedUserHeader, int StartPage, int EndPage, string FindValue, out int PageNumber);
        BusinessSafe.WebSite.SqlReportExecutionService.ServerInfoHeader Sort(BusinessSafe.WebSite.SqlReportExecutionService.ExecutionHeader ExecutionHeader, BusinessSafe.WebSite.SqlReportExecutionService.TrustedUserHeader TrustedUserHeader, string SortItem, BusinessSafe.WebSite.SqlReportExecutionService.SortDirectionEnum Direction, bool Clear, out int PageNumber, out string ReportItem, out int NumPages);
        BusinessSafe.WebSite.SqlReportExecutionService.ServerInfoHeader Sort2(BusinessSafe.WebSite.SqlReportExecutionService.ExecutionHeader ExecutionHeader, BusinessSafe.WebSite.SqlReportExecutionService.TrustedUserHeader TrustedUserHeader, string SortItem, BusinessSafe.WebSite.SqlReportExecutionService.SortDirectionEnum Direction, bool Clear, BusinessSafe.WebSite.SqlReportExecutionService.PageCountMode PaginationMode, out int PageNumber, out string ReportItem, out BusinessSafe.WebSite.SqlReportExecutionService.ExecutionInfo2 ExecutionInfo);
        BusinessSafe.WebSite.SqlReportExecutionService.ServerInfoHeader GetRenderResource(BusinessSafe.WebSite.SqlReportExecutionService.TrustedUserHeader TrustedUserHeader, string Format, string DeviceInfo, out byte[] Result, out string MimeType);
        BusinessSafe.WebSite.SqlReportExecutionService.ServerInfoHeader ListRenderingExtensions(BusinessSafe.WebSite.SqlReportExecutionService.TrustedUserHeader TrustedUserHeader, out Extension[] Extensions);
        BusinessSafe.WebSite.SqlReportExecutionService.ServerInfoHeader LogonUser(string userName, string password, string authority);
        BusinessSafe.WebSite.SqlReportExecutionService.ServerInfoHeader Logoff();
        void Open();
        void Abort();
        void Close();
        void DisplayInitializationUI();
        ChannelFactory<ReportExecutionServiceSoap> ChannelFactory { get; }
        ClientCredentials ClientCredentials { get; }
        CommunicationState State { get; }
        IClientChannel InnerChannel { get; }
        ServiceEndpoint Endpoint { get; }
    }
}