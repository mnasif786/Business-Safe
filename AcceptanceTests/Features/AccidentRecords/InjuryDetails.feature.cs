// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.225
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BusinessSafe.AcceptanceTests.Features.AccidentRecords
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("InjuryDetails")]
    public partial class InjuryDetailsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "InjuryDetails.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "InjuryDetails", "In order to show a country specific question\r\nAs a BSO User\r\nI want to see a juri" +
                    "sdiction specific message", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ROI Message appears when it should")]
        [NUnit.Framework.CategoryAttribute("NeedsAccidentRecordWithJurisdictionSetToROI")]
        public virtual void ROIMessageAppearsWhenItShould()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ROI Message appears when it should", new string[] {
                        "NeedsAccidentRecordWithJurisdictionSetToROI"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have logged in as company with id \'55881\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("I am on the injury page for accident record \'-1\' for companyId \'55881\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And("I wait for \'1000\' miliseconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.Then("element with id \'takenToHospitalMessage\' has value \'Was the injured person taken " +
                    "to hospital or treated by a registered medical practitioner?\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ROI Message does not appear when it shouldn\'t")]
        [NUnit.Framework.CategoryAttribute("NeedsAccidentRecordWithJurisdictionNotSetToROI")]
        public virtual void ROIMessageDoesNotAppearWhenItShouldnT()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ROI Message does not appear when it shouldn\'t", new string[] {
                        "NeedsAccidentRecordWithJurisdictionNotSetToROI"});
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
 testRunner.Given("I have logged in as company with id \'55881\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 17
 testRunner.And("I am on the injury page for accident record \'-1\' for companyId \'55881\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
 testRunner.And("I wait for \'1000\' miliseconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
 testRunner.Then("element with id \'takenToHospitalMessage\' has value \'Was the injured person taken " +
                    "to hospital?\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("No guidance notes for Fatal injuries")]
        [NUnit.Framework.CategoryAttribute("NeedsAccidentRecordWithJurisdictionSetToGB")]
        public virtual void NoGuidanceNotesForFatalInjuries()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No guidance notes for Fatal injuries", new string[] {
                        "NeedsAccidentRecordWithJurisdictionSetToGB"});
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
 testRunner.Given("I am on the injury page for accident record \'-1\' for companyId \'55881\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 25
 testRunner.And("I press \'SeverityOfInjury\' radio button with the value of \'Fatal\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.And("I wait for \'1000\' miliseconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
 testRunner.Then("the element with id \'GuidanceNotes\' has visibility of \'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Save injury details")]
        [NUnit.Framework.CategoryAttribute("NeedsAccidentRecordToAddInjuryDetailsTo")]
        public virtual void SaveInjuryDetails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Save injury details", new string[] {
                        "NeedsAccidentRecordToAddInjuryDetailsTo"});
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
 testRunner.Given("I have logged in as company with id \'55881\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 40
 testRunner.And("I am on the injury page for accident record \'-1\' for companyId \'55881\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
 testRunner.And("I wait for \'1000\' miliseconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
 testRunner.And("I press \'saveButton\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
 testRunner.And("I wait for \'2000\' miliseconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.Then("the element with class \'validation-summary-errors alert alert-error\' has visibili" +
                    "ty of \'true\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute(" Hide Injured Person Able To Carry Out Work Section For Visitor")]
        [NUnit.Framework.CategoryAttribute("NeedsAccidentRecordWithVisitorToAddInjuryDetailsTo")]
        public virtual void HideInjuredPersonAbleToCarryOutWorkSectionForVisitor()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(" Hide Injured Person Able To Carry Out Work Section For Visitor", new string[] {
                        "NeedsAccidentRecordWithVisitorToAddInjuryDetailsTo"});
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("I have logged in as company with id \'55881\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
 testRunner.And("I am on the injury page for accident record \'-1\' for companyId \'55881\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.Then("the element with id \'InjuredPersonAbleToCarryOutWorkSection\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute(" Show Injured Person Able To Carry Out Work Section For Employee")]
        [NUnit.Framework.CategoryAttribute("NeedsAccidentRecordWithEmployeeToAddInjuryDetailsTo")]
        public virtual void ShowInjuredPersonAbleToCarryOutWorkSectionForEmployee()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(" Show Injured Person Able To Carry Out Work Section For Employee", new string[] {
                        "NeedsAccidentRecordWithEmployeeToAddInjuryDetailsTo"});
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
 testRunner.Given("I have logged in as company with id \'55881\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
 testRunner.And("I am on the injury page for accident record \'-1\' for companyId \'55881\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.Then("the element with id \'InjuredPersonAbleToCarryOutWorkSection\' exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Show Custom Injury Description")]
        [NUnit.Framework.CategoryAttribute("NeedsAccidentRecordToAddInjuryDetailsTo")]
        public virtual void ShowCustomInjuryDescription()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Show Custom Injury Description", new string[] {
                        "NeedsAccidentRecordToAddInjuryDetailsTo"});
#line 43
this.ScenarioSetup(scenarioInfo);
#line 44
 testRunner.Given("I have logged in as company with id \'55881\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 45
 testRunner.And("I am on the injury page for accident record \'-1\' for companyId \'55881\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.Given("I have selected the option label \'Other unknown injury\' from multi-select control" +
                    " \'injury\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 47
 testRunner.Then("the element with id \'otherInjuryDescription\' has visibility of \'true\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Show Custom Body Part Description")]
        [NUnit.Framework.CategoryAttribute("NeedsAccidentRecordToAddInjuryDetailsTo")]
        public virtual void ShowCustomBodyPartDescription()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Show Custom Body Part Description", new string[] {
                        "NeedsAccidentRecordToAddInjuryDetailsTo"});
#line 50
this.ScenarioSetup(scenarioInfo);
#line 51
 testRunner.Given("I have logged in as company with id \'55881\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 52
 testRunner.And("I am on the injury page for accident record \'-1\' for companyId \'55881\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.Given("I have selected the option label \'Unknown location\' from multi-select control \'bo" +
                    "dypart\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 54
 testRunner.Then("the element with id \'otherBodyPartDescription\' has visibility of \'true\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
