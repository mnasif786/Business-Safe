// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BusinessSafe.AcceptanceTests.Features.PersonalRiskAssessments
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DeleteAndUndelete")]
    public partial class DeleteAndUndeleteFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DeleteAndUndelete.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DeleteAndUndelete", "I should be able to delete a PRA\r\nAnd then restore it again", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("I have logged in as company with id \'55881\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete and re-instate a personal risk assessment")]
        [NUnit.Framework.CategoryAttribute("Personal_Risk_Assessments")]
        [NUnit.Framework.CategoryAttribute("finetune")]
        public virtual void DeleteAndRe_InstateAPersonalRiskAssessment()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete and re-instate a personal risk assessment", new string[] {
                        "Personal_Risk_Assessments",
                        "finetune"});
#line 10
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 11
 testRunner.Given("I am on the personal risk assessments page for company \'55881\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
 testRunner.When("I click to delete the personal risk assessment with reference \'PRA04\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
 testRunner.And("I click confirm button on delete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("I wait for \'1000\' miliseconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Reference",
                        "Title",
                        "Site",
                        "Assigned To",
                        "Status",
                        "Completion Due Date"});
            table1.AddRow(new string[] {
                        "CFPRA",
                        "Core Functionality Personal Risk Assessment",
                        "Aberdeen",
                        "",
                        "Draft",
                        ""});
            table1.AddRow(new string[] {
                        "Ref: PRA TASKs1",
                        "PRA TASKs1",
                        "",
                        "",
                        "Draft",
                        "12/02/2012"});
            table1.AddRow(new string[] {
                        "Ref: PRA TASKs2",
                        "PRA TASKs2",
                        "",
                        "",
                        "Draft",
                        "12/02/2012"});
            table1.AddRow(new string[] {
                        "PRA03",
                        "PRA 3",
                        "Barnsley",
                        "Russell Williams",
                        "Live",
                        "23/06/2012"});
            table1.AddRow(new string[] {
                        "PRA02",
                        "PRA 2",
                        "Aberdeen",
                        "Russell Williams",
                        "Live",
                        "21/04/2013"});
            table1.AddRow(new string[] {
                        "make sensitive by other user test",
                        "PRA created by Kim",
                        "Aberdeen",
                        "Kim Howard",
                        "Draft",
                        "12/06/2013"});
            table1.AddRow(new string[] {
                        "PRA01",
                        "PRA 1",
                        "Aberdeen",
                        "Russell Williams",
                        "Live",
                        "23/06/2013"});
#line 15
 testRunner.Then("the risk assessment table should contain the following data:", ((string)(null)), table1, "Then ");
#line 24
 testRunner.When("I press \'showDeletedLink\' link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Reference",
                        "Title",
                        "Site",
                        "Assigned To",
                        "Status",
                        "Completion Due Date"});
            table2.AddRow(new string[] {
                        "PRA04",
                        "PRA 4",
                        "Edinburgh",
                        "Russell Williams",
                        "Live",
                        "21/04/2012"});
#line 25
 testRunner.Then("the risk assessment table should contain the following data:", ((string)(null)), table2, "Then ");
#line 28
 testRunner.When("I click to reinstate the personal risk assessment with reference \'PRA04\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.And("I click confirm button on delete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
 testRunner.And("I wait for \'5000\' miliseconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
 testRunner.And("I am on the personal risk assessments page for company \'55881\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Reference",
                        "Title",
                        "Site",
                        "Assigned To",
                        "Status",
                        "Completion Due Date"});
            table3.AddRow(new string[] {
                        "CFPRA",
                        "Core Functionality Personal Risk Assessment",
                        "Aberdeen",
                        "",
                        "Draft",
                        ""});
            table3.AddRow(new string[] {
                        "Ref: PRA TASKs1",
                        "PRA TASKs1",
                        "",
                        "",
                        "Draft",
                        "12/02/2012"});
            table3.AddRow(new string[] {
                        "Ref: PRA TASKs2",
                        "PRA TASKs2",
                        "",
                        "",
                        "Draft",
                        "12/02/2012"});
            table3.AddRow(new string[] {
                        "PRA04",
                        "PRA 4",
                        "Edinburgh",
                        "Russell Williams",
                        "Live",
                        "21/04/2012"});
            table3.AddRow(new string[] {
                        "PRA03",
                        "PRA 3",
                        "Barnsley",
                        "Russell Williams",
                        "Live",
                        "23/06/2012"});
            table3.AddRow(new string[] {
                        "PRA02",
                        "PRA 2",
                        "Aberdeen",
                        "Russell Williams",
                        "Live",
                        "21/04/2013"});
            table3.AddRow(new string[] {
                        "make sensitive by other user test",
                        "PRA created by Kim",
                        "Aberdeen",
                        "Kim Howard",
                        "Draft",
                        "12/06/2013"});
            table3.AddRow(new string[] {
                        "PRA01",
                        "PRA 1",
                        "Aberdeen",
                        "Russell Williams",
                        "Live",
                        "23/06/2013"});
#line 32
 testRunner.Then("the risk assessment table should contain the following data:", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
